import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV,StratifiedKFold
from sklearn.cross_validation import KFold
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
from sklearn.linear_model import LogisticRegression

path = '/Users/charlie/Desktop/TrendMicro/'
tr = pd.read_csv(path +'tr.csv')
te = pd.read_csv(path +'te.csv')
# tr = pd.read_csv(path+'train_AE.csv')
# te = pd.read_csv(path+'test_AE.csv')

features =['CustomerID_unique_count', 'ProductID_unique_count',
       'ProductID_V0374c4', 'ProductID_V055649', 'ProductID_V05b409',
       'ProductID_V0cdb7a', 'ProductID_V20f8a5', 'ProductID_V218578',
       'ProductID_V262880', 'ProductID_V26a5d0', 'ProductID_V3c2be6',
       'ProductID_V3ea8c3', 'ProductID_V533133', 'ProductID_V634e6b',
       'ProductID_V75f310', 'ProductID_V7acab3', 'ProductID_V8452da',
       'ProductID_V8541a0', 'ProductID_V885fab', 'ProductID_V8b7f69',
       'ProductID_Va310bb', 'ProductID_Vaaa9c8', 'ProductID_Vb93794',
       'ProductID_Vc105a0', 'ProductID_Vc76d58', 'ProductID_Vcc3a6a',
       'ProductID_Vd465fc', 'ProductID_Vdd8d4a', 'ProductID_Ve47f04',
       'ProductID_Vfec24f', 'f_count', 'week_V9', 'week_V10', 'week_V11',
       'week_V12', 'week_V13', 'week_V14', 'week_V15', 'week_V16',
       'week_V17', 'week_V18', 'week_V19', 'week_V20', 'week_V21',
       'week_V22', 'week_unique_count', 'month_unique_count', 'time_group',
           'user_behavior_group_v3_count_V0',
       'user_behavior_group_v3_count_V1',
       'user_behavior_group_v3_count_V2',
       'user_behavior_group_v3_count_V3', 'weekday_unique_count',
       'hour_unique_count',
        'mean_hour_count', 'max_hour_count',
       'min_hour_count', 'median_hour_count', 'mean_weekday_count',
       'max_weekday_count', 'min_weekday_count', 'median_weekday_count',
       'mean_week_count', 'max_week_count', 'min_week_count',
       'median_week_count', 'mean_month_count', 'max_month_count',
       'min_month_count', 'median_month_count',
           'std_month_count',
       'std_week_count', 'std_weekday_count', 'std_hour_count',
           'std_ProductID_count', 'mean_ProductID_count',
       'max_ProductID_count', 'min_ProductID_count',
       'median_ProductID_count', 'std_CustomerID_count',
       'mean_CustomerID_count', 'max_CustomerID_count',
       'min_CustomerID_count', 'median_CustomerID_count',
           'mean_FileID_QTS', 'max_FileID_QTS', 'min_FileID_QTS',
       'median_FileID_QTS', 'std_QueryTS_count',
           'mean_File_Customer_Product_diff', 'max_File_Customer_Product_diff',
       'min_File_Customer_Product_diff',
       'median_File_Customer_Product_diff',
       'std_File_Customer_Product_diff',
          'mean_FileID_diff',
       'max_FileID_diff', 'min_FileID_diff', 'median_FileID_diff',
       'std_FileID_diff',
'hour_V0', 'hour_V1', 'hour_V2', 'hour_V3', 'hour_V4', 'hour_V5',
       'hour_V6', 'hour_V7', 'hour_V8', 'hour_V9', 'hour_V10', 'hour_V11',
       'hour_V12', 'hour_V13', 'hour_V14', 'hour_V15', 'hour_V16',
       'hour_V17', 'hour_V18', 'hour_V19', 'hour_V20', 'hour_V21',
       'hour_V22', 'hour_V23',
           'weekday_V0', 'weekday_V1', 'weekday_V2', 'weekday_V3',
       'weekday_V4', 'weekday_V5', 'weekday_V6',
           'mean_Customer_diff', 'max_Customer_diff',
       'min_Customer_diff', 'median_Customer_diff', 'std_Customer_diff',
       'mean_Product_diff', 'max_Product_diff', 'min_Product_diff',
       'median_Product_diff', 'std_Product_diff',
           'mean_FileID_CustomerID_ProductID_hour_count',
       'max_FileID_CustomerID_ProductID_hour_count',
       'min_FileID_CustomerID_ProductID_hour_count',
       'median_FileID_CustomerID_ProductID_hour_count',
       'std_FileID_CustomerID_ProductID_hour_count',
           'mean_FileID_CustomerID_ProductID_weekday_count',
       'max_FileID_CustomerID_ProductID_weekday_count',
       'min_FileID_CustomerID_ProductID_weekday_count',
       'median_FileID_CustomerID_ProductID_weekday_count',
       'std_FileID_CustomerID_ProductID_weekday_count',
 'customer_ratio_mean',
 'customer_ratio_std',
 'customer_ratio_range',
 'customer_ratio_0',
 'customer_ratio_10',
 'customer_ratio_20',
 'customer_ratio_30',
 'customer_ratio_40',
 'customer_ratio_50',
 'customer_ratio_60',
 'customer_ratio_70',
 'customer_ratio_80',
 'customer_ratio_90',
 'customer_ratio_100',
 'prod_ratio_mean',
 'prod_ratio_std',
 'prod_ratio_range',
 'prod_ratio_0',
 'prod_ratio_10',
 'prod_ratio_20',
 'prod_ratio_30',
 'prod_ratio_40',
 'prod_ratio_50',
 'prod_ratio_60',
 'prod_ratio_70',
 'prod_ratio_80',
 'prod_ratio_90',
 'prod_ratio_100',
           'cust_prod_ratio_mean', 'cust_prod_ratio_std',
       'cust_prod_ratio_range', 'cust_prod_ratio_0', 'cust_prod_ratio_10',
       'cust_prod_ratio_20', 'cust_prod_ratio_30', 'cust_prod_ratio_40',
       'cust_prod_ratio_50', 'cust_prod_ratio_60', 'cust_prod_ratio_70',
       'cust_prod_ratio_80', 'cust_prod_ratio_90', 'cust_prod_ratio_100',
           'hour_ratio_mean', 'hour_ratio_std', 'hour_ratio_range',
       'hour_ratio_0', 'hour_ratio_10', 'hour_ratio_20', 'hour_ratio_30',
       'hour_ratio_40', 'hour_ratio_50', 'hour_ratio_60', 'hour_ratio_70',
       'hourratio_80', 'hour_ratio_90', 'hour_ratio_100',
           'weekday_ratio_mean', 'weekdayratio_std', 'weekday_ratio_range',
       'weekday_ratio_0', 'weekday_ratio_10', 'weekday_ratio_20',
       'weekday_ratio_30', 'weekday_ratio_40', 'weekday_ratio_50',
       'weekday_ratio_60', 'weekday_ratio_70', 'weekday_ratio_80',
       'weekday_ratio_90', 'weekday_ratio_100', 'week_ratio_mean',
       'week_ratio_std', 'week_ratio_range', 'week_ratio_0',
       'week_ratio_10', 'week_ratio_20', 'week_ratio_30', 'week_ratio_40',
       'week_ratio_50', 'week_ratio_60', 'week_ratio_70', 'week_ratio_80',
       'week_ratio_90', 'week_ratio_100',
           'count_ratio_0_10',
       'count_ratio_10_20', 'count_ratio_20_30', 'count_ratio_30_40',
       'count_ratio_40_50', 'count_ratio_50_60', 'count_ratio_60_70',
       'count_ratio_70_80', 'count_ratio_80_90', 'count_ratio_90_100',
           'mean_FileID_hour_diff',
       'max_FileID_hour_diff', 'min_FileID_hour_diff',
       'median_FileID_hour_diff', 'std_FileID_hour_diff'
# AE_0, AE_1, AE_2, AE_3, AE_4
          ]
y = tr.bug
X = tr[features]
test_X = te[features]

## grid search for XGB
kfolds = StratifiedKFold(3)
model = LGBMClassifier()
parameters = {'n_estimators':[600,700], 'max_depth':range(6,8),'learning_rate':[0.1, 0.01, 0.001]}
model3 = GridSearchCV(model, parameters,cv=kfolds.split(X, y), scoring='roc_auc')
model3.fit(x_train, y)
print model3.best_score_
print model3.best_params_
print model3.grid_scores_

## grid search for RF
kfolds = StratifiedKFold(5)
model = RandomForestClassifier()
parameters = {'n_estimators':[600,700], 'max_depth':range(6,8),'min_samples_leaf':[1,5,10,50,100]}
model3 = GridSearchCV(model, parameters,cv=kfolds.split(X, y), scoring='roc_auc')
model3.fit(X, y)
print model3.best_score_
print model3.best_params_
print model3.grid_scores_

## grid search for lgb
kfolds = StratifiedKFold(5)
model = LGBMClassifier()
parameters = {'n_estimators':[600,700,800], 'max_depth':range(6,9),'learning_rate':[0.1, 0.001, 0.003]}
model3 = GridSearchCV(model, parameters,cv=kfolds.split(X, y), scoring='roc_auc')
model3.fit(X, y)
print model3.best_score_
print model3.best_params_
print model3.grid_scores_

#StackingModel
model1 = xgb.XGBClassifier(n_estimators=700, max_depth=7, learning_rate = 0.1)
model2 = RandomForestClassifier(n_estimators=600, max_depth=7,min_samples_leaf=10)
model3 = LGBMClassifier(n_estimators=700, learning_rate=0.1, max_depth =7)

# Process of generating meta variables
ntrain = X.shape[0]
ntest = test_X.shape[0]
SEED = 2018 # for reproducibility
NFOLDS = 3 # set folds for out-of-fold prediction
kf = KFold(ntrain, n_folds= NFOLDS, random_state=SEED)

def get_oof(clf, x_train, y_train, x_test):
    oof_train = np.zeros((ntrain,))
    oof_test = np.zeros((ntest,))
    oof_test_skf = np.empty((NFOLDS, ntest))

    for i, (train_index, test_index) in enumerate(kf):
        x_tr = x_train[train_index]
        y_tr = y_train[train_index]
        x_te = x_train[test_index]

        clf.fit(x_tr, y_tr)

        oof_train[test_index] = clf.predict_proba(x_te)[:,1]
        oof_test_skf[i, :] = clf.predict_proba(x_test)[:,1]

    oof_test[:] = oof_test_skf.mean(axis=0)
    return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)

# Layer1
model1_oof_train, model1_oof_test = get_oof(model1, X.values, y.values, test_X.values) # Extra Trees
model2_oof_train, model2_oof_test = get_oof(model2,X.values, y.values, test_X.values) # Random Forest
model3_oof_train, model3_oof_test = get_oof(model3, X.values, y.values, test_X.values) # AdaBoost 

x_train = np.concatenate(( model1_oof_train, model2_oof_train, model3_oof_train), axis=1)
x_test = np.concatenate(( model1_oof_test, model2_oof_test, model3_oof_test), axis=1)

# Layer2 model
kfolds = StratifiedKFold(3)
model = LogisticRegression()
parameters = {'C':[0.001,0.01,0.1,1,10,100],'penalty':['l1','l2']}
model3 = GridSearchCV(model, parameters,cv=kfolds.split(X, y), scoring='roc_auc')
model3.fit(x_train, y)
print model3.best_score_
print model3.best_params_
print model3.grid_scores_

model = LogisticRegression(C=0.001, penalty='l1')
model.fit(x_train, y)

# Make prediction 
pre = model.predict_proba(x_test)
submit = pd.DataFrame({'FileID':te.FileID,'Probability':pre[:,1]})
submit.to_csv(path+'submit.csv',index=False)
submit.describe()
